<?php

namespace App\Tests\Repository;

use App\Domain\Category;
use App\Domain\Price;
use App\Domain\ShopProduct;
use App\Domain\ShopProductRepositoryInterface;
use App\Repository\CategoryDoctrineRepository;
use App\Repository\ShopProductDoctrineRepository;
use Brick\Math\BigDecimal;
use Doctrine\Common\DataFixtures\Purger\ORMPurger;
use PHP_CodeSniffer\Standards\PSR2\Sniffs\Classes\PropertyDeclarationSniff;
use Symfony\Component\HttpKernel\KernelInterface;

class CategoryDoctrineRepositoryTest extends \Symfony\Bundle\FrameworkBundle\Test\KernelTestCase
{
    private $entityManager;
    private KernelInterface $testKernel;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->testKernel = self::bootKernel([
            'environment' => 'test'
        ]);
        $this->entityManager = $this->testKernel->getContainer()
            ->get('doctrine')
            ->getManager();

        $this->truncateEntities();
    }

    public function testItSaveCategory()
    {
        /**
         * @var CategoryDoctrineRepository $repository
         */
        $repository = $this->entityManager->getRepository(Category::class);

        $category = new Category('kategoria1');

        $repository->save($category);

        $newCategory = $repository->find($category->getId());

        $this->assertInstanceOf(CategoryDoctrineRepository::class, $repository);
        $this->assertSame($category->name(), $newCategory->name());
        $this->assertSame($category->getId(), $newCategory->getId());
    }

    public function testItCountsProductsInCategory()
    {
        $category = new Category('trekking');
        $category2 = new Category('running');

        $price = new Price(BigDecimal::of(1.05), 'pln');
        $product1 = new ShopProduct('buty', 'opis', $price, true);
        $product1->addCategory($category);

        $price = new Price(BigDecimal::of(1.05), 'pln');
        $product2 = new ShopProduct('buty2', 'opis', $price, true);
        $product2->addCategory($category2);

        $price = new Price(BigDecimal::of(1.05), 'pln');
        $product3 = new ShopProduct('buty2', 'opis', $price, true);
        $product3->addCategory($category);


        /**
         * @var CategoryDoctrineRepository $repository
         */
        $repository = $this->entityManager->getRepository(Category::class);
        $productRepository = $this->entityManager->getRepository(ShopProduct::class);

        $repository->save($category);
        $repository->save($category2);
        $productRepository->save($product1);
        $productRepository->save($product2);
        $productRepository->save($product3);


        $trekkingShoesCount = $repository->countProductsIn($category);

        $this->assertEquals(2, $trekkingShoesCount);

    }

    public function testItFindsProductsFromCategory()
    {
        $category = new Category('trekking');
        $category2 = new Category('running');

        $price = new Price(BigDecimal::of(1.05), 'pln');
        $product1 = new ShopProduct('hanzel', 'opis', $price, true);
        $product1->addCategory($category);

        $price = new Price(BigDecimal::of(1.05), 'pln');
        $product2 = new ShopProduct('buty2', 'opis', $price, true);
        $product2->addCategory($category2);

        $price = new Price(BigDecimal::of(1.05), 'pln');
        $product3 = new ShopProduct('meindl', 'opis', $price, true);
        $product3->addCategory($category);


        /**
         * @var CategoryDoctrineRepository $repository
         */
        $repository = $this->entityManager->getRepository(Category::class);
        $productRepository = $this->entityManager->getRepository(ShopProduct::class);

        $repository->save($category);
        $repository->save($category2);
        $productRepository->save($product1);
        $productRepository->save($product2);
        $productRepository->save($product3);


        $trekkingShoes = $repository->productsFrom($category);

        $this->assertEquals(2, count($trekkingShoes));
        $this->assertEquals('hanzel', $trekkingShoes[0]->name());
        $this->assertEquals('meindl', $trekkingShoes[1]->name());
    }

    private function truncateEntities()
    {
        $purger = new ORMPurger($this->entityManager);
        $purger->purge();
    }
}
